-- Load libraries
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Create Window
local Window = Fluent:CreateWindow({
    Title = "Fluent Hub",
    SubTitle = "by 29yumoos",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Amethyst",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local Tabs = {
    Main = Window:AddTab({Title = "Main", Icon = ""}),
    Admin = Window:AddTab({Title = "Admin", Icon = ""}),
    Settings = Window:AddTab({Title = "Settings", Icon = "settings"})
}

local Options = Fluent.Options

-- Example Main Tab content
do
    Tabs.Main:AddParagraph({
        Title = "Welcome",
        Content = "This hub includes multiple scripts and features.\nEnjoy!"
    })

    Tabs.Main:AddButton({
        Title = "Infinite Yield",
        Description = "Admin commands for Roblox",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
        end
    })

    Tabs.Main:AddButton({
        Title = "Ez Hub (150+ games)",
        Description = "Multi-game script loader",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/idkname471/29yumoos-Roblox-Hub/refs/heads/main/Yumooshub"))()
        end
    })
end

-- Admin Tab
do
    Tabs.Admin:AddButton({
        Title = "Fates Admin",
        Description = "Admin script",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/fatesc/fates-admin/main/main.lua"))()
        end
    })

    Tabs.Admin:AddButton({
        Title = "Infinite Store",
        Description = "Requires Infinite Yield",
        Callback = function()
            if not game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("InfiniteYield") then
                Fluent:Notify({
                    Title = "Warning",
                    Content = "Infinite Yield must be loaded first!",
                    Duration = 5
                })
            else
                loadstring(game:HttpGet("https://cdn.jsdelivr.net/gh/Infinite-Store/Infinite-Store@main/main.luau"))()
            end
        end
    })
end

-- Example Main Tab Interactive Elements
do
    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Toggle", Default = false})
    Toggle:OnChanged(function()
        print("Toggle changed:", Options.MyToggle.Value)
    end)
    Options.MyToggle:SetValue(false)

    local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "Slider",
        Description = "This is a slider",
        Default = 2,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Callback = function(Value) print("Slider changed:", Value) end
    })
    Slider:SetValue(3)

    local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Dropdown",
        Values = {"one","two","three","four","five"},
        Multi = false,
        Default = 1
    })
    Dropdown:SetValue("four")
    Dropdown:OnChanged(function(Value) print("Dropdown changed:", Value) end)

    local Colorpicker = Tabs.Main:AddColorpicker("Colorpicker", {
        Title = "Colorpicker",
        Default = Color3.fromRGB(96, 205, 255)
    })
    Colorpicker:SetValueRGB(Color3.fromRGB(0, 255, 140))
    Colorpicker:OnChanged(function() print("Colorpicker changed:", Colorpicker.Value) end)

    local Keybind = Tabs.Main:AddKeybind("Keybind", {
        Title = "Keybind",
        Mode = "Toggle",
        Default = "LeftControl",
        Callback = function(Value) print("Keybind clicked!", Value) end,
        ChangedCallback = function(New) print("Keybind changed!", New) end
    })
end

-- Settings Tab with Interface & Config Managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Prevent saving themes in configs
SaveManager:IgnoreThemeSettings()
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

-- Build sections
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

-- Notifications
Fluent:Notify({
    Title = "Fluent Hub",
    Content = "The script has been loaded.",
    Duration = 8
})

-- Auto-load any config marked for autoload
SaveManager:LoadAutoloadConfig()
